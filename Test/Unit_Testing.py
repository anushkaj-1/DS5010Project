# -*- coding: utf-8 -*-
"""Unit_Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1um7LbO0Dw8r_uxZrCeRW3ZOYesUruDCb

#Importing required libraries
"""

import unittest
import pandas as pd
import numpy as np
import cv2
from pypreprocessor_lib import DatasetPreprocessor

"""#Test Case 1"""

class TestPreprocessor(unittest.TestCase):

    def setUp(self):
        #test data created for testing for unit testing
        self.excel = "test_data.xlsx"
        self.data_excel = pd.DataFrame({
            'A': [100, 929, 222],
            'B': [123, 987, 567],
            'C': ['Pappaya', 'Kiwi', 'Blackberry']
        })
        self.data_excel.to_excel(self.excel, index=False)

        #test data created for image
        self.image = "test_image.jpg"
        self.data_image = np.random.randint(0, 255, size=(80, 80, 3), dtype=np.uint8)
        cv2.imwrite(self.image, self.data_image)

        #test data created for text files for unit testing
        self.text = "test.txt"
        self.data_text = ["This text will be used for unit testing.", "I have to add another line."]
        with open(self.text, "w") as f:
            for line in self.data_text:
                f.write(line + "\n")

    def test_load_excel_dataset(self):
        preprocessor = DatasetPreprocessor(self.excel)
        dataset = preprocessor.load_dataset()
        self.assertIsInstance(dataset, pd.DataFrame)
        self.assertEqual(dataset.shape, self.data_excel.shape)

    def test_load_image_dataset(self):
        preprocessor = DatasetPreprocessor(self.image)
        dataset = preprocessor.load_dataset()
        self.assertIsInstance(dataset, np.ndarray)
        self.assertEqual(dataset.shape, self.data_image.shape)

    def test_load_text_dataset(self):
        preprocessor = DatasetPreprocessor(self.text)
        dataset = preprocessor.load_dataset()
        self.assertIsInstance(dataset, list)
        self.assertEqual(len(dataset), len(self.data_text))

    def cleaningtestfiles(self):
        #This peice of code will clear the test data from the files
        import os
        os.remove(self.excel)
        os.remove(self.image)
        os.remove(self.text)


    def test_data_min_max(self):
        preprocessor = DatasetPreprocessor(self.excel)
        data = preprocessor.load_dataset()

        #Below code will scale the data using min max
        df_sc = preprocessor._scale_data(data, method='minmax')

        #Below code will check if the data is scaled properly or not
        self.assertAlmostEqual(df_sc['Pappaya'].min(), 0)
        self.assertAlmostEqual(df_sc['Pappaya'].max(), 1)
        self.assertAlmostEqual(df_sc['Kiwi'].min(), 0)
        self.assertAlmostEqual(df_sc['Kiwi'].max(), 1)


if __name__ == "__main__":
    unittest.main()